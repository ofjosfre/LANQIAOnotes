C51 COMPILER V9.00   9_0                                                                   04/05/2022 21:00:16 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE 9_0
OBJECT MODULE PLACED IN 9.0.OBJ
COMPILER INVOKED BY: D:\kiel 5\C51\BIN\C51.EXE 9.0.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          /*==================蓝桥杯单片机特训==================
   3          【进阶06】：基于PCF8591的DAC模拟电压输出
   4          **平  台：CT107D单片机综合实训平台
   5          **模  式：IO模式
   6          **底层驱动文件：2022年竞赛资源数据包提供的文件
   7          **设  计：欧浩源（小蜜蜂老师，ohy3686@qq.com）
   8          **时  间：2022-04-05
   9          **更多详见：www.xmf393.com
  10          ====================================================*/
  11          #include "reg52.h"
  12          #include "iic.h"
  13          sbit S4 = P3^3;
  14          //定义动态显示中单个数码管点亮时长
  15          #define TSMG  500
  16          //-------共阳数码管的段码编码表（无小数点）--------
  17          //0 1 2 3 4 5 6 7 8 9 A B C D E F - .
  18          unsigned char code SMG_NoDot[18]={0xc0,0xf9,
  19              0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,
  20              0x88,0x80,0xc6,0xc0,0x86,0x8e,0xbf,0x7f};
  21          //-------共阳数码管的段码编码表（带小数点）--------
  22          //0. 1. 2. 3. 4. 5. 6. 7. 8. 9.
  23          unsigned char code SMG_Dot[10]={0x40,0x79,
  24              0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};
  25          //-----------------------------------------------
  26          unsigned char adc_value = 0;    //AIN3的采样数据
  27          float adc_volt = 0;              //AIN3的换算电压
  28          unsigned int smg_volt = 0;      //AIN3的显示电压
  29          unsigned char stat_smg = 1;      //当前显示界面标志
  30          unsigned char mode = 1;          //模式
  31          //==============数码管动态显示专用延时函数=============
  32          void DelaySMG(unsigned int t)
  33          {
  34   1        while(t--);
  35   1      }
  36          //==================设置选通的锁存器===================
  37          void Set_HC573(unsigned char channel, unsigned char dat)
  38          {
  39   1        P0 = dat;                      //待设置数据
  40   1        switch(channel)                //选通锁存器
  41   1        {
  42   2          case 4:
  43   2            P2 = (P2 & 0x1f) | 0x80;  //Y4输出0，LED控制
  44   2          break;
  45   2          case 5:
  46   2            P2 = (P2 & 0x1f) | 0xa0;  //Y5输出0，蜂鸣器和继电器控制
  47   2          break;
  48   2          case 6:
  49   2            P2 = (P2 & 0x1f) | 0xc0;  //Y6输出0，数码管位选
  50   2          break;
  51   2          case 7:
  52   2            P2 = (P2 & 0x1f) | 0xe0;  //Y7输出0，数码管段码
  53   2          break;
  54   2          case 0:
  55   2            P2 = (P2 & 0x1f) | 0x00;  //所有锁存器不选择
C51 COMPILER V9.00   9_0                                                                   04/05/2022 21:00:16 PAGE 2   

  56   2          break;
  57   2        }
  58   1        P2 = (P2 & 0x1f) | 0x00;      //设置完成，关闭全部锁存器
  59   1      }
  60          //=================单个数码管动态显示=================
  61          void DisplaySMG_Bit(unsigned char pos, unsigned char value)
  62          {
  63   1        Set_HC573(6, 0x01 << pos);    //数码管的段位
  64   1        Set_HC573(7, value);          //数码管显示内容
  65   1        DelaySMG(TSMG);                //数码管点亮时长
  66   1        Set_HC573(6, 0x01 << pos);        
  67   1        Set_HC573(7, 0xff);            //消隐
  68   1      }
  69          //=================全部数码管静态显示=================
  70          void DisplaySMG_All(unsigned char value)
  71          {
  72   1        Set_HC573(6, 0xff);    //使能所有数码管
  73   1        Set_HC573(7, value);  //数码管显示内容  
  74   1      }
  75          //===================电压值显示函数===================
  76          void DisplaySMG_ADC()
  77          {
  78   1        //输出电压
  79   1        DisplaySMG_Bit(7,SMG_NoDot[smg_volt  % 10]);
  80   1        DisplaySMG_Bit(6,SMG_NoDot[(smg_volt / 10) % 10]);    
  81   1        DisplaySMG_Bit(5,SMG_Dot[smg_volt / 100]);        
  82   1        //工作模式
  83   1        DisplaySMG_Bit(2,SMG_NoDot[16]);
  84   1        DisplaySMG_Bit(1,SMG_NoDot[mode]);    
  85   1        DisplaySMG_Bit(0,SMG_NoDot[16]);    
  86   1      }
  87          //===============PCF8591电压采样处理函数===============
  88          void Read_PCF8591_AIN3()
  89          {
  90   1        IIC_Start();          
  91   1        IIC_SendByte(0x90);    //PCF8591的写设备地址 
  92   1        IIC_WaitAck();        
  93   1        IIC_SendByte(0x43);   //输出DAC，转换AIN3      
  94   1        IIC_WaitAck();              
  95   1        IIC_Stop(); 
  96   1        
  97   1        DisplaySMG_ADC();      //等待电压转换完成
  98   1        
  99   1        IIC_Start();                  
 100   1        IIC_SendByte(0x91);   //PCF8591的读设备地址
 101   1        IIC_WaitAck();                 
 102   1        adc_value = IIC_RecByte();  //读出AD采样数据
 103   1        IIC_SendAck(1);         //产生非应答信号                 
 104   1        IIC_Stop();
 105   1        //将ADC采样到的数据换算成对应的电压值
 106   1        adc_volt = adc_value * (5.0 / 255);
 107   1        smg_volt = adc_volt * 100;
 108   1      }
 109          //===============PCF8591电压输出设置函数===============
 110          void Set_PCF8591_DAC(unsigned char dat)
 111          {
 112   1        IIC_Start();          
 113   1        IIC_SendByte(0x90);    //PCF8591的写设备地址 
 114   1        IIC_WaitAck();  
 115   1        IIC_SendByte(0x43);   //输出DAC，转换AIN3  
 116   1        IIC_WaitAck();                 
 117   1        IIC_SendByte(dat);     //设置DAC电压输出参数
C51 COMPILER V9.00   9_0                                                                   04/05/2022 21:00:16 PAGE 3   

 118   1        IIC_WaitAck();          //产生非应答信号                 
 119   1        IIC_Stop();
 120   1      }
 121          //===================按键扫描处理函数==================
 122          void Scan_Keys()
 123          {
 124   1        if(S4 == 0)
 125   1        {
 126   2          DelaySMG(500);  
 127   2          if(S4 == 0)
 128   2          {
 129   3            if(mode == 1)            
 130   3            {
 131   4              mode = 2;              //切换为模式2
 132   4              Set_PCF8591_DAC(204);  //输出固定电压4V
 133   4              smg_volt = 400;        //显示电压：4.00
 134   4            }
 135   3            else if(mode == 2)
 136   3            {
 137   4              mode = 3;              //切换为模式3
 138   4            }
 139   3            else if(mode == 3)
 140   3            {
 141   4              mode = 1;              //切换为模式1
 142   4              Set_PCF8591_DAC(102);  //输出固定电压2V
 143   4              smg_volt = 200;        //显示电压：2.00
 144   4            }
 145   3            while(S4 == 0)          //松手检测
 146   3            {  
 147   4              DisplaySMG_ADC();      //保持数码管动态显示
 148   4            }
 149   3          }
 150   2        }
 151   1      }
 152          //=====================系统初始化=====================
 153          void Init_sys()
 154          {
 155   1        Set_HC573(0, 0x00);        //关闭所有锁存器
 156   1        Set_HC573(5, 0x00);        //关闭蜂鸣器和继电器
 157   1        Set_HC573(4, 0xff);        //关闭全部LED灯
 158   1        DisplaySMG_All(0xff);      //关闭全部数码管
 159   1        Set_PCF8591_DAC(102);      //输出固定电压2V
 160   1        smg_volt = 200;            //数码管显示2.00V
 161   1      }
 162          //=======================主函数=======================
 163          void main()
 164          {
 165   1        Init_sys();                //系统初始化
 166   1        while(1)
 167   1        {
 168   2          if(mode == 3)            //模式3：可调电阻控制DAC输出
 169   2          {
 170   3            Read_PCF8591_AIN3();        //采样AIN3电压
 171   3            Set_PCF8591_DAC(adc_value);  //更新DAC输出参数
 172   3          }
 173   2          Scan_Keys();          //循环扫描按键
 174   2          DisplaySMG_ADC();      //动态刷新数码管
 175   2        }
 176   1      }
 177          //========================END========================


C51 COMPILER V9.00   9_0                                                                   04/05/2022 21:00:16 PAGE 4   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    538    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
